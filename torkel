import os
import sys

import itertools
import argparse
import errno
import math
import random
# from collections import deque


def parse_tsv(): # maybe support gff too
    pass

def collapse_identical_for_mumer():
    '''
        Creates a mapping from one segment on the genome to several exons containig the segment, this to remove redundancy in database when calling mummer
    '''
    pass

def create_exon_graph():
    pass

def main(args):

    exon_db = parse_tsv()
    non_redundant_segments = collapse_identical_for_mumer(exon_db)
    graph = create_graph()
    graph_top_sorted_order = top_sort_graph()
    hits = run_mummer(non_redundant_segments, reads )
    for read_hits in hits:
        chain_hits_read()

    # reads = { acc : (seq, qual) for acc, (seq,qual) in readfq(open(args.reads, 'r'))}
    # reads_sampled = random.sample(list(reads.keys()), args.nr_reads)

    # outfile = open(args.outfile, "w")
    # for acc in reads_sampled:
    #     seq, qual = reads[acc]
    #     outfile.write("@{0}\n{1}\n+\n{2}\n".format(acc, seq, qual))

    # outfile.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Plot p-minimizers shared.")
    parser.add_argument('--reads', type=str, help='Path to fasta file with a nucleotide sequence (e.g., gene locus) to simulate isoforms from.')
    parser.add_argument('--transcripts', type=str, help='Path to fasta file with a nucleotide sequence (e.g., gene locus) to simulate isoforms from.')
    parser.add_argument('--gff', type=str, help='Path to fasta file with a nucleotide sequence (e.g., gene locus) to simulate isoforms from.')
    parser.add_argument('--outfile', type=str, help='Path to fasta file with a nucleotide sequence (e.g., gene locus) to simulate isoforms from.')
    # parser.add_argument('--nr_reads', type=int, default = 1000000, help='Nr reads')
    
    args = parser.parse_args()


    if len(sys.argv)==1:
        parser.print_help()
        sys.exit()

    main(args)

